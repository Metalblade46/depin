// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String    @id @default(uuid())
  email   String
  Website Website[]
}

model Website {
  id           String         @id @default(uuid())
  url          String
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  WebsiteTicks WebsiteTicks[]
  disabled     Boolean        @default(false)
}

model Validator {
  id               String         @id @default(uuid())
  publicKey        String
  location         String
  ip               String
  pendingPayouts   Int            @default(0)
  requestedPayouts Int            @default(0)
  locked           Boolean        @default(false)
  WebsiteTicks     WebsiteTicks[]
  Transactions     Transactions[]
}

model WebsiteTicks {
  id          String    @id @default(uuid())
  website     Website   @relation(fields: [websiteId], references: [id])
  websiteId   String
  validator   Validator @relation(fields: [validatorId], references: [id])
  validatorId String
  timestamp   DateTime
  status      Status
  latency     Float?
}

model Transactions {
  id          String    @id @default(uuid())
  validator   Validator @relation(fields: [validatorId], references: [id])
  validatorId String
  txnSignature String 
  timestamp   DateTime @default(now())
  amount      Int
  status      TransactionStatus  @default(PENDING)
}

enum Status {
  Up
  Down
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}